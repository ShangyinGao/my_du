[1mdiff --git a/src/utility.cpp b/src/utility.cpp[m
[1mindex d4f2e1c..ebdbf35 100644[m
[1m--- a/src/utility.cpp[m
[1m+++ b/src/utility.cpp[m
[36m@@ -1,12 +1,12 @@[m
[31m-#include <vector>[m
[31m-#include <opencv2/opencv.hpp>[m
[32m+[m[32m#include "utility.h"[m
 [m
[31m-static cv::Scalar randomColor (cv::RNG &rng) {[m
[31m-        int icolor = (unsigned) rng;[m
[31m-        return cv::Scalar(icolor & 255, (icolor >> 8) & 255, (icolor >> 16) & 255);[m
[32m+[m
[32m+[m[32mcv::Scalar Utility::randomColor (cv::RNG &rng) {[m
[32m+[m[32m    int icolor = (unsigned) rng;[m
[32m+[m[32m    return cv::Scalar(icolor & 255, (icolor >> 8) & 255, (icolor >> 16) & 255);[m
 }[m
 [m
[31m-void vis_keypoins (const cv::Mat img1_, const cv::Mat img2_, const std::vector<cv::KeyPoint> &kp1_, const std::vector<cv::KeyPoint> &kp2_) {[m
[32m+[m[32mvoid Utility::vis_keypoins (const cv::Mat img1_, const cv::Mat img2_, const std::vector<cv::KeyPoint> &kp1_, const std::vector<cv::KeyPoint> &kp2_) {[m
     cv::Mat img1 = img1_.clone();[m
     cv::Mat img2 = img2_.clone();[m
     cv::RNG rng(12345);[m
[36m@@ -17,4 +17,37 @@[m [mvoid vis_keypoins (const cv::Mat img1_, const cv::Mat img2_, const std::vector<c[m
     cv::imshow("img2 with keypoints", img2);[m
 [m
     cv::waitKey(0);[m
[31m-}[m
\ No newline at end of file[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mint Utility::getdir (std::string &dir, std::vector<std::string> &files) {[m
[32m+[m[32m    DIR *dp;[m
[32m+[m[32m    struct dirent *dirp;[m
[32m+[m[32m    if((dp  = opendir(dir.c_str())) == NULL) {[m
[32m+[m[32m        std::cout << "Error(" << errno << ") opening " << dir << std::endl;[m
[32m+[m[32m        return errno;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    while ((dirp = readdir(dp)) != NULL) {[m
[32m+[m[32m        if (dirp->d_name[0] == '.')[m
[32m+[m[32m            continue;[m
[32m+[m[32m        files.push_back(std::string(dirp->d_name));[m
[32m+[m[32m    }[m
[32m+[m[32m    closedir(dp);[m
[32m+[m
[32m+[m[32m    std::sort(files.begin(), files.end());[m
[32m+[m
[32m+[m[32m    return 0;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtemplate<typename Out>[m
[32m+[m[32mvoid Utility::split(const std::string &s, char delim, Out result) {[m
[32m+[m[32m    std::stringstream ss(s);[m
[32m+[m[32m    std::string item;[m
[32m+[m[32m    while (std::getline(ss, item, delim)) {[m
[32m+[m[32m        *(result++) = item;[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid Utility::splitString(const std::string &s, char delim, std::vector<std::string> &ret) {[m
[32m+[m[32m    split(s, delim, std::back_inserter(ret));[m
[32m+[m[32m}[m
